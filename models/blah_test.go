// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBlahs(t *testing.T) {
	t.Parallel()

	query := Blahs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBlahsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Blah{}
	if err = randomize.Struct(seed, o, blahDBTypes, true, blahColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blah struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Blahs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBlahsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Blah{}
	if err = randomize.Struct(seed, o, blahDBTypes, true, blahColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blah struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Blahs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Blahs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBlahsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Blah{}
	if err = randomize.Struct(seed, o, blahDBTypes, true, blahColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blah struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BlahSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Blahs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBlahsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Blah{}
	if err = randomize.Struct(seed, o, blahDBTypes, true, blahColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blah struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BlahExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Blah exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BlahExists to return true, but got false.")
	}
}

func testBlahsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Blah{}
	if err = randomize.Struct(seed, o, blahDBTypes, true, blahColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blah struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	blahFound, err := FindBlah(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if blahFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBlahsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Blah{}
	if err = randomize.Struct(seed, o, blahDBTypes, true, blahColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blah struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Blahs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBlahsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Blah{}
	if err = randomize.Struct(seed, o, blahDBTypes, true, blahColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blah struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Blahs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBlahsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blahOne := &Blah{}
	blahTwo := &Blah{}
	if err = randomize.Struct(seed, blahOne, blahDBTypes, false, blahColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blah struct: %s", err)
	}
	if err = randomize.Struct(seed, blahTwo, blahDBTypes, false, blahColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blah struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = blahOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = blahTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Blahs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBlahsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	blahOne := &Blah{}
	blahTwo := &Blah{}
	if err = randomize.Struct(seed, blahOne, blahDBTypes, false, blahColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blah struct: %s", err)
	}
	if err = randomize.Struct(seed, blahTwo, blahDBTypes, false, blahColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blah struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = blahOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = blahTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Blahs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func blahBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Blah) error {
	*o = Blah{}
	return nil
}

func blahAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Blah) error {
	*o = Blah{}
	return nil
}

func blahAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Blah) error {
	*o = Blah{}
	return nil
}

func blahBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Blah) error {
	*o = Blah{}
	return nil
}

func blahAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Blah) error {
	*o = Blah{}
	return nil
}

func blahBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Blah) error {
	*o = Blah{}
	return nil
}

func blahAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Blah) error {
	*o = Blah{}
	return nil
}

func blahBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Blah) error {
	*o = Blah{}
	return nil
}

func blahAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Blah) error {
	*o = Blah{}
	return nil
}

func testBlahsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Blah{}
	o := &Blah{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, blahDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Blah object: %s", err)
	}

	AddBlahHook(boil.BeforeInsertHook, blahBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	blahBeforeInsertHooks = []BlahHook{}

	AddBlahHook(boil.AfterInsertHook, blahAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	blahAfterInsertHooks = []BlahHook{}

	AddBlahHook(boil.AfterSelectHook, blahAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	blahAfterSelectHooks = []BlahHook{}

	AddBlahHook(boil.BeforeUpdateHook, blahBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	blahBeforeUpdateHooks = []BlahHook{}

	AddBlahHook(boil.AfterUpdateHook, blahAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	blahAfterUpdateHooks = []BlahHook{}

	AddBlahHook(boil.BeforeDeleteHook, blahBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	blahBeforeDeleteHooks = []BlahHook{}

	AddBlahHook(boil.AfterDeleteHook, blahAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	blahAfterDeleteHooks = []BlahHook{}

	AddBlahHook(boil.BeforeUpsertHook, blahBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	blahBeforeUpsertHooks = []BlahHook{}

	AddBlahHook(boil.AfterUpsertHook, blahAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	blahAfterUpsertHooks = []BlahHook{}
}

func testBlahsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Blah{}
	if err = randomize.Struct(seed, o, blahDBTypes, true, blahColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blah struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Blahs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBlahsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Blah{}
	if err = randomize.Struct(seed, o, blahDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Blah struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(blahColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Blahs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBlahsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Blah{}
	if err = randomize.Struct(seed, o, blahDBTypes, true, blahColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blah struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBlahsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Blah{}
	if err = randomize.Struct(seed, o, blahDBTypes, true, blahColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blah struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BlahSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBlahsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Blah{}
	if err = randomize.Struct(seed, o, blahDBTypes, true, blahColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blah struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Blahs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	blahDBTypes = map[string]string{`ID`: `integer`, `IsDeleted`: `boolean`}
	_           = bytes.MinRead
)

func testBlahsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(blahPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(blahAllColumns) == len(blahPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Blah{}
	if err = randomize.Struct(seed, o, blahDBTypes, true, blahColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blah struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Blahs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, blahDBTypes, true, blahPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Blah struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBlahsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(blahAllColumns) == len(blahPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Blah{}
	if err = randomize.Struct(seed, o, blahDBTypes, true, blahColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blah struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Blahs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, blahDBTypes, true, blahPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Blah struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(blahAllColumns, blahPrimaryKeyColumns) {
		fields = blahAllColumns
	} else {
		fields = strmangle.SetComplement(
			blahAllColumns,
			blahPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BlahSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBlahsUpsert(t *testing.T) {
	t.Parallel()

	if len(blahAllColumns) == len(blahPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Blah{}
	if err = randomize.Struct(seed, &o, blahDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Blah struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Blah: %s", err)
	}

	count, err := Blahs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, blahDBTypes, false, blahPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Blah struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Blah: %s", err)
	}

	count, err = Blahs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
